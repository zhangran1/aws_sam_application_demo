AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sam Template for Tech Hunt Take Home Assessment

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 800

Resources:
  UploadFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: upload.lambda_handler
      Runtime: python3.7

  GetUsersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: get_users.lambda_handler
      Runtime: python3.7

  GetUserByIDFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: get_user_by_id.lambda_handler
      Runtime: python3.7

  CreateUserByIDFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: create_user.lambda_handler
      Runtime: python3.7

  PatchUserByIDFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: patch_user.lambda_handler
      Runtime: python3.7

  DeleteUserByIDFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: apps/
      Handler: delete_user_by_id.lambda_handler
      Runtime: python3.7

  UploadAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - UploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UploadFunction
      Principal: apigateway.amazonaws.com

  GetUsersAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - GetUsersFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUsersFunction
      Principal: apigateway.amazonaws.com

  GetUsersByIDAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - GetUserByIDFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserByIDFunction
      Principal: apigateway.amazonaws.com

  CreateUserByIDAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - CreateUserByIDFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserByIDFunction
      Principal: apigateway.amazonaws.com

  PatchUserByIDAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - DeleteUserByIDFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteUserByIDFunction
      Principal: apigateway.amazonaws.com


  DeleteUserByIDAPIPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - UsersAPI
      - PatchUserByIDFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PatchUserByIDFunction
      Principal: apigateway.amazonaws.com


  UsersAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      BinaryMediaTypes:
        - multipart/form-data
      DefinitionBody:
        swagger: "2.0"
        info:
          version: 0.0.1
          title: Upload-API

        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
          params-only:
            validateRequestBody: false
            validateRequestParameters: true

        x-amazon-apigateway-request-validator: all
        paths:
          "/users/upload":
            post:
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadFunction.Arn}/invocations
              responses: {}
              security:
                  - MyUserPool: []

          "/users":
            get:
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
              responses: {}
              security:
                - MyUserPool: []

          "/users/{id}/":
            get:
              parameters:
                - in: path
                  name: id
                  type: string
                  required: true
                  description: ID of user
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserByIDFunction.Arn}/invocations
              responses: {}
              security:
                - MyUserPool: []

            post:
              parameters:
                - in: path
                  name: id
                  type: string
                  required: true
                  description: ID of user
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserByIDFunction.Arn}/invocations
              responses: {}
              security:
                - MyUserPool: []

            patch:
              parameters:
                - in: path
                  name: id
                  type: string
                  required: true
                  description: ID of user
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PatchUserByIDFunction.Arn}/invocations
              responses: {}
              security:
                - MyUserPool: []

            delete:
              parameters:
                - in: path
                  name: id
                  type: string
                  required: true
                  description: ID of user
              consumes:
                - application/json
              x-amazon-apigateway-integration: # More information about x-amazon-apigateway-integration https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html
                httpMethod: POST   # More information why post is required https://stackoverflow.com/questions/41371970/accessdeniedexception-unable-to-determine-service-operation-name-to-be-authoriz
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserByIDFunction.Arn}/invocations
              responses: {}
              security:
                - MyUserPool: []


